# ðŸš— Car Inventory Backend - Environment Configuration Template

# ================================
# SERVER CONFIGURATION
# ================================
PORT=5000
NODE_ENV=development

# ================================
# GOOGLE SHEETS CONFIGURATION
# ================================
# Local development (file-based credentials)
GOOGLE_SHEETS_CREDENTIALS_PATH=./credentials/google-credentials.json
GOOGLE_SHEETS_SPREADSHEET_ID=your_spreadsheet_id_here

# Production deployment (base64 encoded credentials)
# GOOGLE_CREDENTIALS_BASE64=your_base64_encoded_credentials_here

# ================================
# GOOGLE DRIVE CONFIGURATION
# ================================
# Google Drive folder ID where inventory files will be stored
# Leave empty or set to 'root' to store in root folder
GOOGLE_DRIVE_INVENTORY_FOLDER_ID=root 

# File retention period in days (default: 30)
# Files older than this will be automatically deleted
GOOGLE_DRIVE_RETENTION_DAYS=30

# ================================
# FRONTEND CORS CONFIGURATION
# ================================
# Development frontend URL
FRONTEND_URL=http://localhost:3000

# Production frontend URL (if different)
# FRONTEND_URL_PRODUCTION=https://your-production-frontend.com

# ================================
# RATE LIMITING CONFIGURATION
# ================================
# Rate limit window in milliseconds (default: 15 minutes)
RATE_LIMIT_WINDOW_MS=900000

# Maximum requests per window (default: 100 in production, 2000 in development)
RATE_LIMIT_MAX_REQUESTS=100

# ================================
# WEBSOCKET CONFIGURATION
# ================================
# WebSocket path for inventory real-time updates
WEBSOCKET_PATH=/ws/inventory

# Maximum connections per room (default: 50)
WEBSOCKET_MAX_CONNECTIONS_PER_ROOM=50

# Rate limiting for WebSocket messages (messages per minute per user per type)
WEBSOCKET_RATE_LIMIT_MAX_MESSAGES=100

# Heartbeat interval in milliseconds (default: 30 seconds)
WEBSOCKET_HEARTBEAT_INTERVAL=30000

# WebSocket server URL for frontend connections (production)
# WEBSOCKET_SERVER_URL=wss://your-production-domain.com

# ================================
# API CONFIGURATION
# ================================
# Backend API URL for frontend connections (production)
# API_BASE_URL=https://your-production-domain.com

# CORS allowed origins (comma-separated for multiple origins)
# CORS_ORIGINS=http://localhost:3000,https://your-frontend-domain.com

# ================================
# GOOGLE SHEETS API QUOTA MANAGEMENT
# ================================
# Production-optimized quota settings to prevent quota exceeded errors
# These settings are automatically applied - no manual configuration needed

# Rate limiting settings (handled by system)
# GOOGLE_SHEETS_MIN_REQUEST_INTERVAL=500
# GOOGLE_SHEETS_MAX_REQUESTS_PER_MINUTE=30

# Caching settings (handled by system)  
# GOOGLE_SHEETS_CACHE_DURATION=120000
# GOOGLE_SHEETS_MAX_CACHE_SIZE=500

# Quota safety margins (handled by system)
# GOOGLE_SHEETS_SAFETY_MARGIN=0.6
# GOOGLE_SHEETS_EMERGENCY_MODE_THRESHOLD=0.8

# ================================
# OPTIONAL CONFIGURATION
# ================================
# Auth0 configuration (if using authentication)
# AUTH0_DOMAIN=your-auth0-domain.auth0.com
# AUTH0_AUDIENCE=your-api-identifier

# ================================
# PRODUCTION DEPLOYMENT CONFIGURATION
# ================================
# For production deployment (Render, Heroku, etc.):

# 1. CREDENTIALS (REQUIRED)
#    Set GOOGLE_CREDENTIALS_BASE64 instead of GOOGLE_SHEETS_CREDENTIALS_PATH
#    Get base64 credentials: node scripts/get-base64-credentials.js

# 2. ENVIRONMENT (REQUIRED)
#    NODE_ENV=production

# 3. FRONTEND URL (REQUIRED)
#    Set FRONTEND_URL to your production frontend URL
#    FRONTEND_URL=https://your-production-frontend.com

# 4. QUOTA MANAGEMENT (AUTOMATIC)
#    The system automatically applies production-optimized settings:
#    - 500ms delays between API calls
#    - 30 requests/minute limit
#    - 2-minute caching
#    - 60% safety margin
#    - Emergency mode at 80% quota usage

# 5. RATE LIMITING (AUTOMATIC)
#    Production rate limiting is automatically enabled
#    - 100 requests per 15 minutes per IP
#    - WebSocket message rate limiting
#    - API endpoint protection

# 6. MONITORING (RECOMMENDED)
#    Monitor quota usage through Google Cloud Console
#    - APIs & Services â†’ Dashboard â†’ Google Sheets API
#    - Set up alerts for quota approaching limits

# ================================
# QUOTA INCREASE REQUEST (RECOMMENDED)
# ================================
# For production with multiple users and 100+ scans per inventory:
# 1. Go to Google Cloud Console â†’ IAM & Admin â†’ Quotas
# 2. Find "Read requests per minute per user" for Google Sheets API
# 3. Request increase to 500-1000 requests/minute
# 4. Justification: "Production inventory management system with multiple concurrent users"
# 5. Timeline: 1-2 weeks for approval
